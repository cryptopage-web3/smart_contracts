/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface PageAdminInterface extends ethers.utils.Interface {
    functions: {
        "addSafe(address[])": FunctionFragment;
        "changeSafe(address,address)": FunctionFragment;
        "init(address,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "pageMinter()": FunctionFragment;
        "pageNFT()": FunctionFragment;
        "pageToken()": FunctionFragment;
        "removeMinter(string)": FunctionFragment;
        "removeSafe(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setBurnNFTCost(uint256)": FunctionFragment;
        "setMinter(string,address,uint256)": FunctionFragment;
        "setTreasuryAddress(address)": FunctionFragment;
        "setTreasuryFee(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasuryAddress()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addSafe", values: [string[]]): string;
    encodeFunctionData(
        functionFragment: "changeSafe",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "init",
        values: [string, string]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "pageMinter",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "pageNFT", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "pageToken",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "removeMinter",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "removeSafe",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "setBurnNFTCost",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setMinter",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setTreasuryAddress",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "setTreasuryFee",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "treasuryAddress",
        values?: undefined
    ): string;

    decodeFunctionResult(functionFragment: "addSafe", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "changeSafe",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "pageMinter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "pageNFT", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "pageToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeMinter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeSafe",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setBurnNFTCost",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setMinter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setTreasuryAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setTreasuryFee",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "transferOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "treasuryAddress",
        data: BytesLike
    ): Result;

    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface PageAdmin extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: PageAdminInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        addSafe(
            _safe: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        init(
            _pageNFT: string,
            _pageToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        pageMinter(overrides?: CallOverrides): Promise<[string]>;

        pageNFT(overrides?: CallOverrides): Promise<[string]>;

        pageToken(overrides?: CallOverrides): Promise<[string]>;

        removeMinter(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        removeSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setBurnNFTCost(
            _pageamount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setMinter(
            _key: string,
            _account: string,
            _pageamount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setTreasuryAddress(
            _treasury: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setTreasuryFee(
            _percent: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        treasuryAddress(overrides?: CallOverrides): Promise<[string]>;
    };

    addSafe(
        _safe: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSafe(
        _from: string,
        _to: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
        _pageNFT: string,
        _pageToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    pageMinter(overrides?: CallOverrides): Promise<string>;

    pageNFT(overrides?: CallOverrides): Promise<string>;

    pageToken(overrides?: CallOverrides): Promise<string>;

    removeMinter(
        _key: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSafe(
        _safe: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnNFTCost(
        _pageamount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinter(
        _key: string,
        _account: string,
        _pageamount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
        _treasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryFee(
        _percent: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        addSafe(_safe: string[], overrides?: CallOverrides): Promise<void>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: CallOverrides
        ): Promise<void>;

        init(
            _pageNFT: string,
            _pageToken: string,
            overrides?: CallOverrides
        ): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        pageMinter(overrides?: CallOverrides): Promise<string>;

        pageNFT(overrides?: CallOverrides): Promise<string>;

        pageToken(overrides?: CallOverrides): Promise<string>;

        removeMinter(_key: string, overrides?: CallOverrides): Promise<void>;

        removeSafe(_safe: string, overrides?: CallOverrides): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        setBurnNFTCost(
            _pageamount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setMinter(
            _key: string,
            _account: string,
            _pageamount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        setTreasuryAddress(
            _treasury: string,
            overrides?: CallOverrides
        ): Promise<void>;

        setTreasuryFee(
            _percent: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        transferOwnership(
            newOwner: string,
            overrides?: CallOverrides
        ): Promise<void>;

        treasuryAddress(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        addSafe(
            _safe: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        init(
            _pageNFT: string,
            _pageToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        pageMinter(overrides?: CallOverrides): Promise<BigNumber>;

        pageNFT(overrides?: CallOverrides): Promise<BigNumber>;

        pageToken(overrides?: CallOverrides): Promise<BigNumber>;

        removeMinter(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        removeSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setBurnNFTCost(
            _pageamount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setMinter(
            _key: string,
            _account: string,
            _pageamount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setTreasuryAddress(
            _treasury: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setTreasuryFee(
            _percent: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        addSafe(
            _safe: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        init(
            _pageNFT: string,
            _pageToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pageMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pageNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pageToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        removeMinter(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        removeSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setBurnNFTCost(
            _pageamount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setMinter(
            _key: string,
            _account: string,
            _pageamount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setTreasuryAddress(
            _treasury: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setTreasuryFee(
            _percent: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        treasuryAddress(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
