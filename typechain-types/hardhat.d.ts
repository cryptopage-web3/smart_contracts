/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
    FactoryOptions,
    HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
    interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
        getContractFactory(
            name: "Ownable",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.Ownable__factory>;
        getContractFactory(
            name: "ERC20",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ERC20__factory>;
        getContractFactory(
            name: "IERC20Metadata",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC20Metadata__factory>;
        getContractFactory(
            name: "IERC20",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC20__factory>;
        getContractFactory(
            name: "ERC721",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ERC721__factory>;
        getContractFactory(
            name: "ERC721URIStorage",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ERC721URIStorage__factory>;
        getContractFactory(
            name: "IERC721Metadata",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC721Metadata__factory>;
        getContractFactory(
            name: "IERC721",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC721__factory>;
        getContractFactory(
            name: "IERC721Receiver",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC721Receiver__factory>;
        getContractFactory(
            name: "ERC165",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ERC165__factory>;
        getContractFactory(
            name: "IERC165",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC165__factory>;
        getContractFactory(
            name: "PageAdmin",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageAdmin__factory>;
        getContractFactory(
            name: "PageComment",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageComment__factory>;
        getContractFactory(
            name: "Admin",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.Admin__factory>;
        getContractFactory(
            name: "ASafe",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ASafe__factory>;
        getContractFactory(
            name: "PageMinter",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageMinter__factory>;
        getContractFactory(
            name: "PageMinterNFT",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageMinterNFT__factory>;
        getContractFactory(
            name: "PageNFTBank",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageNFTBank__factory>;
        getContractFactory(
            name: "BeaconProxy",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.BeaconProxy__factory>;
        getContractFactory(
            name: "IBeacon",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IBeacon__factory>;
        getContractFactory(
            name: "PageNFTMarket",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageNFTMarket__factory>;
        getContractFactory(
            name: "Proxy",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.Proxy__factory>;
        getContractFactory(
            name: "PageProfile",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageProfile__factory>;
        getContractFactory(
            name: "PageToken",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.PageToken__factory>;
        getContractFactory(
            name: "IERCMINT",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERCMINT__factory>;
        getContractFactory(
            name: "IMINTER",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IMINTER__factory>;
        getContractFactory(
            name: "INFTMINT",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.INFTMINT__factory>;
        getContractFactory(
            name: "ISAFE",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISAFE__factory>;
        getContractFactory(
            name: "UExecutor",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.UExecutor__factory>;

        getContractAt(
            name: "Ownable",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.Ownable>;
        getContractAt(
            name: "ERC20",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ERC20>;
        getContractAt(
            name: "IERC20Metadata",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC20Metadata>;
        getContractAt(
            name: "IERC20",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC20>;
        getContractAt(
            name: "ERC721",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ERC721>;
        getContractAt(
            name: "ERC721URIStorage",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ERC721URIStorage>;
        getContractAt(
            name: "IERC721Metadata",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC721Metadata>;
        getContractAt(
            name: "IERC721",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC721>;
        getContractAt(
            name: "IERC721Receiver",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC721Receiver>;
        getContractAt(
            name: "ERC165",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ERC165>;
        getContractAt(
            name: "IERC165",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC165>;
        getContractAt(
            name: "PageAdmin",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageAdmin>;
        getContractAt(
            name: "PageComment",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageComment>;
        getContractAt(
            name: "Admin",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.Admin>;
        getContractAt(
            name: "ASafe",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ASafe>;
        getContractAt(
            name: "PageMinter",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageMinter>;
        getContractAt(
            name: "PageMinterNFT",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageMinterNFT>;
        getContractAt(
            name: "PageNFTBank",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageNFTBank>;
        getContractAt(
            name: "BeaconProxy",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.BeaconProxy>;
        getContractAt(
            name: "IBeacon",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IBeacon>;
        getContractAt(
            name: "PageNFTMarket",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageNFTMarket>;
        getContractAt(
            name: "Proxy",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.Proxy>;
        getContractAt(
            name: "PageProfile",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageProfile>;
        getContractAt(
            name: "PageToken",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.PageToken>;
        getContractAt(
            name: "IERCMINT",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERCMINT>;
        getContractAt(
            name: "IMINTER",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IMINTER>;
        getContractAt(
            name: "INFTMINT",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.INFTMINT>;
        getContractAt(
            name: "ISAFE",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISAFE>;
        getContractAt(
            name: "UExecutor",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.UExecutor>;

        // default types
        getContractFactory(
            name: string,
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<ethers.ContractFactory>;
        getContractFactory(
            abi: any[],
            bytecode: ethers.utils.BytesLike,
            signer?: ethers.Signer
        ): Promise<ethers.ContractFactory>;
        getContractAt(
            nameOrAbi: string | any[],
            address: string,
            signer?: ethers.Signer
        ): Promise<ethers.Contract>;
    }
}
