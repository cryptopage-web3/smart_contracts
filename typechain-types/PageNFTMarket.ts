/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface PageNFTMarketInterface extends ethers.utils.Interface {
    functions: {
        "PAGE_MINTER()": FunctionFragment;
        "PAGE_NFT()": FunctionFragment;
        "PAGE_TOKEN()": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "PAGE_MINTER",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "PAGE_NFT",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "PAGE_TOKEN",
        values?: undefined
    ): string;

    decodeFunctionResult(
        functionFragment: "PAGE_MINTER",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "PAGE_NFT", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "PAGE_TOKEN",
        data: BytesLike
    ): Result;

    events: {};
}

export interface PageNFTMarket extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: PageNFTMarketInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        PAGE_MINTER(overrides?: CallOverrides): Promise<[string]>;

        PAGE_NFT(overrides?: CallOverrides): Promise<[string]>;

        PAGE_TOKEN(overrides?: CallOverrides): Promise<[string]>;
    };

    PAGE_MINTER(overrides?: CallOverrides): Promise<string>;

    PAGE_NFT(overrides?: CallOverrides): Promise<string>;

    PAGE_TOKEN(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        PAGE_MINTER(overrides?: CallOverrides): Promise<string>;

        PAGE_NFT(overrides?: CallOverrides): Promise<string>;

        PAGE_TOKEN(overrides?: CallOverrides): Promise<string>;
    };

    filters: {};

    estimateGas: {
        PAGE_MINTER(overrides?: CallOverrides): Promise<BigNumber>;

        PAGE_NFT(overrides?: CallOverrides): Promise<BigNumber>;

        PAGE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        PAGE_MINTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PAGE_NFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        PAGE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
