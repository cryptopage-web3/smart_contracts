/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface INFTMINTInterface extends ethers.utils.Interface {
    functions: {
        "burn(uint256)": FunctionFragment;
        "creatorOf(uint256)": FunctionFragment;
        "getBaseURL()": FunctionFragment;
        "setBaseURL(string)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "burn",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "creatorOf",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getBaseURL",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "setBaseURL",
        values: [string]
    ): string;

    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "creatorOf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getBaseURL",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setBaseURL",
        data: BytesLike
    ): Result;

    events: {};
}

export interface INFTMINT extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: INFTMINTInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        burn(
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        creatorOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        getBaseURL(overrides?: CallOverrides): Promise<[string]>;

        setBaseURL(
            url: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    burn(
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
    ): Promise<string>;

    getBaseURL(overrides?: CallOverrides): Promise<string>;

    setBaseURL(
        url: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        creatorOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        getBaseURL(overrides?: CallOverrides): Promise<string>;

        setBaseURL(url: string, overrides?: CallOverrides): Promise<void>;
    };

    filters: {};

    estimateGas: {
        burn(
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        creatorOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getBaseURL(overrides?: CallOverrides): Promise<BigNumber>;

        setBaseURL(
            url: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        burn(
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        creatorOf(
            tokenId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getBaseURL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setBaseURL(
            url: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
