/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface PageCommentInterface extends ethers.utils.Interface {
    functions: {
        "_comment(string,bool,address)": FunctionFragment;
        "commentsById(uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "totalStats()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "_comment",
        values: [string, boolean, string]
    ): string;
    encodeFunctionData(
        functionFragment: "commentsById",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "totalStats",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [string]
    ): string;

    decodeFunctionResult(functionFragment: "_comment", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "commentsById",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "renounceOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "totalStats",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "transferOwnership",
        data: BytesLike
    ): Result;

    events: {
        "NewComment(uint256,address,string,bool)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "NewComment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NewCommentEvent = TypedEvent<
    [BigNumber, string, string, boolean],
    { uid: BigNumber; author: string; text: string; like: boolean }
>;

export type NewCommentEventFilter = TypedEventFilter<NewCommentEvent>;

export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface PageComment extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: PageCommentInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        _comment(
            text: string,
            like: boolean,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        commentsById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, string, boolean] & {
                uid: BigNumber;
                author: string;
                text: string;
                like: boolean;
            }
        >;

        owner(overrides?: CallOverrides): Promise<[string]>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        totalStats(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, BigNumber] & {
                comments: BigNumber;
                likes: BigNumber;
                dislikes: BigNumber;
            }
        >;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    _comment(
        text: string,
        like: boolean,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commentsById(
        arg0: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, string, string, boolean] & {
            uid: BigNumber;
            author: string;
            text: string;
            like: boolean;
        }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStats(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, BigNumber] & {
            comments: BigNumber;
            likes: BigNumber;
            dislikes: BigNumber;
        }
    >;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        _comment(
            text: string,
            like: boolean,
            user: string,
            overrides?: CallOverrides
        ): Promise<void>;

        commentsById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, string, boolean] & {
                uid: BigNumber;
                author: string;
                text: string;
                like: boolean;
            }
        >;

        owner(overrides?: CallOverrides): Promise<string>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        totalStats(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, BigNumber] & {
                comments: BigNumber;
                likes: BigNumber;
                dislikes: BigNumber;
            }
        >;

        transferOwnership(
            newOwner: string,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "NewComment(uint256,address,string,bool)"(
            uid?: null,
            author?: null,
            text?: null,
            like?: null
        ): NewCommentEventFilter;
        NewComment(
            uid?: null,
            author?: null,
            text?: null,
            like?: null
        ): NewCommentEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        _comment(
            text: string,
            like: boolean,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        commentsById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        totalStats(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        _comment(
            text: string,
            like: boolean,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        commentsById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        totalStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
