/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface PageTokenInterface extends ethers.utils.Interface {
    functions: {
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "burn(uint256)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "isEnoughOn(address,uint256)": FunctionFragment;
        "mint(address,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "safeDeposit(address,address,uint256)": FunctionFragment;
        "safeWithdraw(address,address,uint256)": FunctionFragment;
        "symbol()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "xburn(address,uint256)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "allowance",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "approve",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(
        functionFragment: "burn",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "decimals",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "decreaseAllowance",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "increaseAllowance",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "isEnoughOn",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "safeDeposit",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "safeWithdraw",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "totalSupply",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "transfer",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "xburn",
        values: [string, BigNumberish]
    ): string;

    decodeFunctionResult(
        functionFragment: "allowance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "balanceOf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "decreaseAllowance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "increaseAllowance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isEnoughOn",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "safeDeposit",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "safeWithdraw",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "totalSupply",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "transferFrom",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "xburn", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PageToken extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: PageTokenInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        allowance(
            owner: string,
            spender: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        balanceOf(
            account: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        burn(
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isEnoughOn(
            account: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        mint(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        safeDeposit(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        safeWithdraw(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        xburn(
            from: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    allowance(
        owner: string,
        spender: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEnoughOn(
        account: string,
        amount: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    safeDeposit(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeWithdraw(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xburn(
        from: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        allowance(
            owner: string,
            spender: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        balanceOf(
            account: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

        decimals(overrides?: CallOverrides): Promise<number>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isEnoughOn(
            account: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        mint(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        name(overrides?: CallOverrides): Promise<string>;

        safeDeposit(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        safeWithdraw(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        symbol(overrides?: CallOverrides): Promise<string>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        xburn(
            from: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "Approval(address,address,uint256)"(
            owner?: string | null,
            spender?: string | null,
            value?: null
        ): ApprovalEventFilter;
        Approval(
            owner?: string | null,
            spender?: string | null,
            value?: null
        ): ApprovalEventFilter;

        "Transfer(address,address,uint256)"(
            from?: string | null,
            to?: string | null,
            value?: null
        ): TransferEventFilter;
        Transfer(
            from?: string | null,
            to?: string | null,
            value?: null
        ): TransferEventFilter;
    };

    estimateGas: {
        allowance(
            owner: string,
            spender: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        balanceOf(
            account: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        burn(
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isEnoughOn(
            account: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        mint(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        safeDeposit(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        safeWithdraw(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        xburn(
            from: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        allowance(
            owner: string,
            spender: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        balanceOf(
            account: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        burn(
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decreaseAllowance(
            spender: string,
            subtractedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        increaseAllowance(
            spender: string,
            addedValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isEnoughOn(
            account: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        mint(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        safeDeposit(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        safeWithdraw(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        xburn(
            from: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
