/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface PageProfileInterface extends ethers.utils.Interface {
    functions: {
        "_add_social(string,string)": FunctionFragment;
        "_add_status(string)": FunctionFragment;
        "pageMinter()": FunctionFragment;
        "socialById(uint256)": FunctionFragment;
        "statusById(uint256)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "_add_social",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "_add_status",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "pageMinter",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "socialById",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "statusById",
        values: [BigNumberish]
    ): string;

    decodeFunctionResult(
        functionFragment: "_add_social",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "_add_status",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "pageMinter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "socialById",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "statusById",
        data: BytesLike
    ): Result;

    events: {};
}

export interface PageProfile extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: PageProfileInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        _add_social(
            title: string,
            url: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        _add_status(
            text: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        pageMinter(overrides?: CallOverrides): Promise<[string]>;

        socialById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, string, string] & {
                uid: BigNumber;
                author: string;
                title: string;
                url: string;
            }
        >;

        statusById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, string] & {
                uid: BigNumber;
                author: string;
                text: string;
            }
        >;
    };

    _add_social(
        title: string,
        url: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _add_status(
        text: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pageMinter(overrides?: CallOverrides): Promise<string>;

    socialById(
        arg0: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, string, string, string] & {
            uid: BigNumber;
            author: string;
            title: string;
            url: string;
        }
    >;

    statusById(
        arg0: BigNumberish,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, string, string] & {
            uid: BigNumber;
            author: string;
            text: string;
        }
    >;

    callStatic: {
        _add_social(
            title: string,
            url: string,
            overrides?: CallOverrides
        ): Promise<void>;

        _add_status(text: string, overrides?: CallOverrides): Promise<void>;

        pageMinter(overrides?: CallOverrides): Promise<string>;

        socialById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, string, string] & {
                uid: BigNumber;
                author: string;
                title: string;
                url: string;
            }
        >;

        statusById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, string] & {
                uid: BigNumber;
                author: string;
                text: string;
            }
        >;
    };

    filters: {};

    estimateGas: {
        _add_social(
            title: string,
            url: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        _add_status(
            text: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        pageMinter(overrides?: CallOverrides): Promise<BigNumber>;

        socialById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        statusById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        _add_social(
            title: string,
            url: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        _add_status(
            text: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        pageMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        socialById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        statusById(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
