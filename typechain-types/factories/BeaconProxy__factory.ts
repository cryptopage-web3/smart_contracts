/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    Signer,
    utils,
    BytesLike,
    Contract,
    ContractFactory,
    PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BeaconProxy, BeaconProxyInterface } from "../BeaconProxy";

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "beacon",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        stateMutability: "payable",
        type: "constructor",
    },
    {
        stateMutability: "payable",
        type: "fallback",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
];

const _bytecode =
    "0x608060405260405161033738038061033783398101604081905261002291610094565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161017f565b6000805160206103178339815191521461007757634e487b7160e01b600052600160045260246000fd5b61008d8260008051602061031783398151915255565b50506101b8565b600080604083850312156100a6578182fd5b82516001600160a01b03811681146100bc578283fd5b602084810151919350906001600160401b03808211156100da578384fd5b818601915086601f8301126100ed578384fd5b8151818111156100ff576100ff6101a2565b604051601f8201601f19908116603f01168101908382118183101715610127576101276101a2565b81604052828152898684870101111561013e578687fd5b8693505b8284101561015f5784840186015181850187015292850192610142565b8284111561016f57868684830101525b8096505050505050509250929050565b60008282101561019d57634e487b7160e01b81526011600452602481fd5b500390565b634e487b7160e01b600052604160045260246000fd5b610150806101c76000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610029565b6100c8565b565b60006100537fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b6001600160a01b031663da5257166040518163ffffffff1660e01b815260040160206040518083038186803b15801561008b57600080fd5b505afa15801561009f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c391906100ec565b905090565b3660008037600080366000845af43d6000803e8080156100e7573d6000f35b3d6000fd5b6000602082840312156100fd578081fd5b81516001600160a01b0381168114610113578182fd5b939250505056fea264697066735822122044c51c64369b4b82a263b8682869f3a6a34d924f62d4aa11657f16d362e31f1964736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50";

type BeaconProxyConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
    xs: BeaconProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BeaconProxy__factory extends ContractFactory {
    constructor(...args: BeaconProxyConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    deploy(
        beacon: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BeaconProxy> {
        return super.deploy(
            beacon,
            data,
            overrides || {}
        ) as Promise<BeaconProxy>;
    }
    getDeployTransaction(
        beacon: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(beacon, data, overrides || {});
    }
    attach(address: string): BeaconProxy {
        return super.attach(address) as BeaconProxy;
    }
    connect(signer: Signer): BeaconProxy__factory {
        return super.connect(signer) as BeaconProxy__factory;
    }
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): BeaconProxyInterface {
        return new utils.Interface(_abi) as BeaconProxyInterface;
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): BeaconProxy {
        return new Contract(address, _abi, signerOrProvider) as BeaconProxy;
    }
}
