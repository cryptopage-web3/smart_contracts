/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface UExecutorInterface extends ethers.utils.Interface {
    functions: {
        "_activeStrategies()": FunctionFragment;
        "_strategies(string)": FunctionFragment;
        "_strategyId()": FunctionFragment;
        "_totalStrategies()": FunctionFragment;
        "addSafe(address)": FunctionFragment;
        "changeOwner(address)": FunctionFragment;
        "changeSafe(address,address)": FunctionFragment;
        "createStrategy(string,address)": FunctionFragment;
        "getStrategy(string)": FunctionFragment;
        "isSafe(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "pauseStrategy(string)": FunctionFragment;
        "removeSafe(address)": FunctionFragment;
        "removeStrategy(string)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "unpauseStrategy(string)": FunctionFragment;
        "updateStrategy(string,address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "_activeStrategies",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "_strategies",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "_strategyId",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "_totalStrategies",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "addSafe", values: [string]): string;
    encodeFunctionData(
        functionFragment: "changeOwner",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "changeSafe",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "createStrategy",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "getStrategy",
        values: [string]
    ): string;
    encodeFunctionData(functionFragment: "isSafe", values: [string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "pauseStrategy",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "removeSafe",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "removeStrategy",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "unpauseStrategy",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "updateStrategy",
        values: [string, string]
    ): string;

    decodeFunctionResult(
        functionFragment: "_activeStrategies",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "_strategies",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "_strategyId",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "_totalStrategies",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "addSafe", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "changeOwner",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "changeSafe",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "createStrategy",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getStrategy",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "isSafe", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "pauseStrategy",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeSafe",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeStrategy",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "unpauseStrategy",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateStrategy",
        data: BytesLike
    ): Result;

    events: {
        "OwnershipRenounced(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "OwnershipRenounced"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipRenouncedEvent = TypedEvent<
    [string],
    { previousOwner: string }
>;

export type OwnershipRenouncedEventFilter =
    TypedEventFilter<OwnershipRenouncedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface UExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: UExecutorInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        _activeStrategies(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { _value: BigNumber }>;

        _strategies(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, boolean] & {
                id: BigNumber;
                author: string;
                status: boolean;
            }
        >;

        _strategyId(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { _value: BigNumber }>;

        _totalStrategies(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { _value: BigNumber }>;

        addSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        changeOwner(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        createStrategy(
            _key: string,
            _account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getStrategy(
            _key: string,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, boolean] & {
                id: BigNumber;
                author: string;
                status: boolean;
            }
        >;

        isSafe(_check: string, overrides?: CallOverrides): Promise<[boolean]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        pauseStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        removeSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        removeStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        unpauseStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        updateStrategy(
            _key: string,
            _account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    _activeStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    _strategies(
        arg0: string,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, string, boolean] & {
            id: BigNumber;
            author: string;
            status: boolean;
        }
    >;

    _strategyId(overrides?: CallOverrides): Promise<BigNumber>;

    _totalStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    addSafe(
        _safe: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSafe(
        _from: string,
        _to: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStrategy(
        _key: string,
        _account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStrategy(
        _key: string,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, string, boolean] & {
            id: BigNumber;
            author: string;
            status: boolean;
        }
    >;

    isSafe(_check: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseStrategy(
        _key: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSafe(
        _safe: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeStrategy(
        _key: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseStrategy(
        _key: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStrategy(
        _key: string,
        _account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        _activeStrategies(overrides?: CallOverrides): Promise<BigNumber>;

        _strategies(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, boolean] & {
                id: BigNumber;
                author: string;
                status: boolean;
            }
        >;

        _strategyId(overrides?: CallOverrides): Promise<BigNumber>;

        _totalStrategies(overrides?: CallOverrides): Promise<BigNumber>;

        addSafe(_safe: string, overrides?: CallOverrides): Promise<void>;

        changeOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: CallOverrides
        ): Promise<void>;

        createStrategy(
            _key: string,
            _account: string,
            overrides?: CallOverrides
        ): Promise<void>;

        getStrategy(
            _key: string,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, string, boolean] & {
                id: BigNumber;
                author: string;
                status: boolean;
            }
        >;

        isSafe(_check: string, overrides?: CallOverrides): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        pauseStrategy(_key: string, overrides?: CallOverrides): Promise<void>;

        removeSafe(_safe: string, overrides?: CallOverrides): Promise<void>;

        removeStrategy(_key: string, overrides?: CallOverrides): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        unpauseStrategy(_key: string, overrides?: CallOverrides): Promise<void>;

        updateStrategy(
            _key: string,
            _account: string,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "OwnershipRenounced(address)"(
            previousOwner?: string | null
        ): OwnershipRenouncedEventFilter;
        OwnershipRenounced(
            previousOwner?: string | null
        ): OwnershipRenouncedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: string | null,
            newOwner?: string | null
        ): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        _activeStrategies(overrides?: CallOverrides): Promise<BigNumber>;

        _strategies(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        _strategyId(overrides?: CallOverrides): Promise<BigNumber>;

        _totalStrategies(overrides?: CallOverrides): Promise<BigNumber>;

        addSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        changeOwner(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        createStrategy(
            _key: string,
            _account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getStrategy(
            _key: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isSafe(_check: string, overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        pauseStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        removeSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        removeStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        unpauseStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        updateStrategy(
            _key: string,
            _account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        _activeStrategies(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        _strategies(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        _strategyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        _totalStrategies(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        addSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        changeOwner(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        changeSafe(
            _from: string,
            _to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        createStrategy(
            _key: string,
            _account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getStrategy(
            _key: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isSafe(
            _check: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pauseStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        removeSafe(
            _safe: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        removeStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        unpauseStrategy(
            _key: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        updateStrategy(
            _key: string,
            _account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
